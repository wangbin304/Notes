1）特点一：matlab在进行矩阵操作的时候是按列读取

在使用矩阵进行操作的时候，比如
array=[1,2,3;4,5,6;7,8,9]
num=ones(5)
num(array(:)<=1)=0

上面语句运行的结果是
array =

     1     2     3
     4     5     6
     7     8     9


num =

     1     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1


num =

     0     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1


下面的语句：

num(array(:)==8)=0
运行的结果是
num =

     0     0     1     1     1
     1     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1
     
     
     
     
下面的语句：
  num(array(:)>=2)=0
运行的结果是
num =

     0     0     1     1     1
     0     0     1     1     1
     0     0     1     1     1
     0     0     1     1     1
     0     1     1     1     1








2）特点二： 对矩阵进行操作的时候，前行后列，num(:,1:2)   1:2 是列
 num=ones(4,6)

num =

     1     1     1     1     1     1
     1     1     1     1     1     1
     1     1     1     1     1     1
     1     1     1     1     1     1

>> num(:,1:2)=0

num =

     0     0     1     1     1     1
     0     0     1     1     1     1
     0     0     1     1     1     1
     0     0     1     1     1     1



3）特点三：进行
array=[1,2,3;4,5,6;7,8,9]
num=ones(5)
num(array(:)>=?)=?
这类的操作，如果num的维度和array相同，则第三条语句的操作相当于在原矩阵上面的操作。
因为num（？）   ？中的矩阵是按列读取操作的，并且
num（）=？  ？ 左边的矩阵num也是按列读取操作的。
综上，第三条语句相当于在array原矩阵中进行判断操作一样。



4）特点四：矩阵嵌套 判断、取值的时候，


>> J=[1,2,3;3,3,3;4,-1,-5]

J =

     1     2     3
     3     3     3
     4    -1    -5

>> JJ=ones(3)

JJ =

     1     1     1
     1     1     1
     1     1     1

>> JJ(J(:,2:3)<=0)=0

JJ =

     1     1     1
     1     1     1
     0     0     1


JJ() 括号里面的J(:,2:3)是从JJ的第1列开始，相当于在同纬度矩阵JJ中只替换了前两列符合条件的元素。
