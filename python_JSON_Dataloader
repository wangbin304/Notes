



import cv2
import random
import json, os
from pycocotools.coco import COCO
from skimage import io
from matplotlib import pyplot as plt

train_json = '..//datasets//thermal_annotations.json'
train_path = '../datasets/'

import torch
import numpy as np
def visualization_bbox2(json_path):
    data = json.load(open(json_path, 'r'))
    coco = COCO(json_path)
    # img_annIds = coco.getAnnIds(0)
    # print(img_annIds)
    img_annIds=[]
    for i in range(1,len(data["images"])+1):
        img_annIds.append(i)
    # print(img_annIds)
    # input()

    for i in img_annIds:
        img = coco.loadImgs(i-1)[0]  # 获取满足上述要求，并给定显示第num幅image对应的dict
        print(img['file_name'])
    # for i in img_annIds:
    # for k in data["annotations"][0]:
    print(len(data["annotations"]))
    a=[]
    aa=[]
    tt=0
    for i in img_annIds:
        a=[]
        for j in range(tt,len(data["annotations"])):
            if data["annotations"][j]["image_id"]==i-1:
                a.append(data["annotations"][j]["bbox"])
                a.append(data["annotations"][j]["category_id"])
                tt=j
            if data["annotations"][j]["image_id"]==i or tt==len(data["annotations"])-1:
                aa.append(a)
                break
    # print(len(aa[0]),aa[:])
    for i in range(len(img_annIds)):
        box = []
        label = []
        for j in range(int(len(aa[i])/2)):
            x=float(aa[i][0+2*j][0])
            y = float(aa[i][0+2*j][1])
            x2 = float(aa[i][0+2*j][2])+x
            y2 = float(aa[i][0+2*j][3])+y
            c=aa[i][1+2*j]
            # print(x,y,x2,y2,c)
            box.append([x, y, x2, y2])
            label.append(int(c) + 1)
        print(box,"\n",label)
        # input()



        #         x = float(splited[1 + 5 * i])
        #         y = float(splited[2 + 5 * i])
        #         x2 = float(splited[3 + 5 * i])
        #         y2 = float(splited[4 + 5 * i])
        #         c = splited[5 + 5 * i]
        #         box.append([x, y, x2, y2])
        #         label.append(int(c) + 1)
        #     self.boxes.append(torch.Tensor(box))
        #     self.labels.append(torch.LongTensor(label))
        #     print(j)
        # print()
    # for i in img_annIds:
    #     print(aa[i-1])
    # input()


    # for i in range(len(data["annotations"])):
    #     # print(type(data["annotations"][i]["image_id"]))
    #     a.append(data["annotations"][i]["bbox"])
    #     a.append(data["annotations"][i]["category_id"])
    # print(a)
    # print(data["annotations"][0]['bbox'])
    # input()

    # # for i in range(80):
    # #     print(data["categories"][i-1]["name"])
    # # input()
    # # list_imgIds = coco.getImgIds(catIds=1)  # 获取含有该给定类别的所有图片的id
    # # print(list_imgIds)
    # # print(list_imgIds)
    #
    # image = io.imread(img_path + img['file_name'])  # 读取图像
    # # plt.imshow(image)
    # # plt.show()
    # # print(coco.loadAnns(0))
    # image_name = img['file_name']  # 读取图像名字
    # print("sss",image_name)
    # image_id = img['id']  # 读取图像id
    # print(data["categories"][0]["name"])
    # for k in data["categories"][0]:
    #     print(k)
    # print()
    # for k in data["annotations"][0]:
    #     print(k)
    # print()
    # for k in data["categories"][0]:
    #     print(k)
    # print()
    # input()
    # for i in range(len(img_annIds)):
    #     print(i)
    #     print("***", len(img_annIds))
    #     print(coco.loadAnns(6))
    #     x, y, w, h = coco.loadAnns(1)[0]['bbox']  # 读取边框
    #     image = cv2.rectangle(image, (int(x), int(y)), (int(x + w), int(y + h)), (0, 255, 255), 2)
    #
    #     plt.rcParams['figure.figsize'] = (20.0, 20.0)
    #     # 此处的20.0是由于我的图片是2000*2000，目前还没去研究怎么利用plt自动分辨率。
    #     plt.imshow(image)
    #     plt.show()


if __name__ == "__main__":
    visualization_bbox2(train_json)














# error


import cv2
import random
import json, os
from pycocotools.coco import COCO
from skimage import io
from matplotlib import pyplot as plt

train_json = '..//datasets//thermal_annotations.json'
train_path = '../datasets/'


def visualization_bbox2(json_path):
    data = json.load(open(json_path, 'r'))
    coco = COCO(json_path)
    # error  coco.getAnnIds(0) return 4  const
    img_annIds = coco.getAnnIds(0)
    print(img_annIds)

    for i in img_annIds:
        img = coco.loadImgs(i-1)[0]  # 获取满足上述要求，并给定显示第num幅image对应的dict
        print(img['file_name'])
    # for i in img_annIds:
    # for k in data["annotations"][0]:
    print(len(data["annotations"]))
    a=[]
    aa=[]
    tt=0
    for i in img_annIds:
        a=[]
        for j in range(tt,len(data["annotations"])):
            if data["annotations"][j]["image_id"]==i-1:
                a.append(data["annotations"][j]["bbox"])
                a.append(data["annotations"][j]["category_id"])
                tt=j
            if data["annotations"][j]["image_id"]==i or tt==len(data["annotations"])-1:
                aa.append(a)
                break
    for i in img_annIds:
        print(aa[i-1])
    input()


    for i in range(len(data["annotations"])):
        # print(type(data["annotations"][i]["image_id"]))
        a.append(data["annotations"][i]["bbox"])
        a.append(data["annotations"][i]["category_id"])
    print(a)
    print(data["annotations"][0]['bbox'])
    input()

    # # for i in range(80):
    # #     print(data["categories"][i-1]["name"])
    # # input()
    # # list_imgIds = coco.getImgIds(catIds=1)  # 获取含有该给定类别的所有图片的id
    # # print(list_imgIds)
    # # print(list_imgIds)
    #
    # image = io.imread(img_path + img['file_name'])  # 读取图像
    # # plt.imshow(image)
    # # plt.show()
    # # print(coco.loadAnns(0))
    # image_name = img['file_name']  # 读取图像名字
    # print("sss",image_name)
    # image_id = img['id']  # 读取图像id
    # print(data["categories"][0]["name"])
    # for k in data["categories"][0]:
    #     print(k)
    # print()
    # for k in data["annotations"][0]:
    #     print(k)
    # print()
    # for k in data["categories"][0]:
    #     print(k)
    # print()
    # input()
    # for i in range(len(img_annIds)):
    #     print(i)
    #     print("***", len(img_annIds))
    #     print(coco.loadAnns(6))
    #     x, y, w, h = coco.loadAnns(1)[0]['bbox']  # 读取边框
    #     image = cv2.rectangle(image, (int(x), int(y)), (int(x + w), int(y + h)), (0, 255, 255), 2)
    #
    #     plt.rcParams['figure.figsize'] = (20.0, 20.0)
    #     # 此处的20.0是由于我的图片是2000*2000，目前还没去研究怎么利用plt自动分辨率。
    #     plt.imshow(image)
    #     plt.show()


if __name__ == "__main__":
    visualization_bbox2(train_json)
























import cv2
import random
import json, os
from pycocotools.coco import COCO
from skimage import io
from matplotlib import pyplot as plt

train_json = '..//datasets//thermal_annotations.json'
train_path = '../datasets/'


def visualization_bbox2(json_path):
    data = json.load(open(json_path, 'r'))
    coco = COCO(json_path)
    img_annIds = coco.getAnnIds(0)
    print(img_annIds)

    for i in img_annIds:
        img = coco.loadImgs(i-1)[0]  # 获取满足上述要求，并给定显示第num幅image对应的dict
        print(img['file_name'])
    # for i in img_annIds:
    # for k in data["annotations"][0]:
    print(len(data["annotations"]))
    a=[]
    aa=[]
    tt=0
    for i in img_annIds:
        a=[]
        for j in range(tt,len(data["annotations"])):
            if data["annotations"][j]["image_id"]==i-1:
                a.append(data["annotations"][j]["bbox"])
                a.append(data["annotations"][j]["category_id"])
                tt=j
            if data["annotations"][j]["image_id"]==i or tt==len(data["annotations"])-1:
                aa.append(a)
                break
    # print(len(aa[0]),aa[:])
    for i in range(len(img_annIds)):
        box = []
        label = []
        for j in range(int(len(aa[i])/2)):
            x=float(aa[i][0+2*j][0])
            y = float(aa[i][0+2*j][1])
            x2 = float(aa[i][0+2*j][2])
            y2 = float(aa[i][0+2*j][3])
            c=aa[i][1+2*j]
            # print(x,y,x2,y2,c)
            box.append([x, y, x2, y2])
            label.append(int(c) + 1)
        # print(box,"\n",label)
        # input()



        #         x = float(splited[1 + 5 * i])
        #         y = float(splited[2 + 5 * i])
        #         x2 = float(splited[3 + 5 * i])
        #         y2 = float(splited[4 + 5 * i])
        #         c = splited[5 + 5 * i]
        #         box.append([x, y, x2, y2])
        #         label.append(int(c) + 1)
        #     self.boxes.append(torch.Tensor(box))
        #     self.labels.append(torch.LongTensor(label))
        #     print(j)
        # print()
    # for i in img_annIds:
    #     print(aa[i-1])
    # input()


    # for i in range(len(data["annotations"])):
    #     # print(type(data["annotations"][i]["image_id"]))
    #     a.append(data["annotations"][i]["bbox"])
    #     a.append(data["annotations"][i]["category_id"])
    # print(a)
    # print(data["annotations"][0]['bbox'])
    # input()

    # # for i in range(80):
    # #     print(data["categories"][i-1]["name"])
    # # input()
    # # list_imgIds = coco.getImgIds(catIds=1)  # 获取含有该给定类别的所有图片的id
    # # print(list_imgIds)
    # # print(list_imgIds)
    #
    # image = io.imread(img_path + img['file_name'])  # 读取图像
    # # plt.imshow(image)
    # # plt.show()
    # # print(coco.loadAnns(0))
    # image_name = img['file_name']  # 读取图像名字
    # print("sss",image_name)
    # image_id = img['id']  # 读取图像id
    # print(data["categories"][0]["name"])
    # for k in data["categories"][0]:
    #     print(k)
    # print()
    # for k in data["annotations"][0]:
    #     print(k)
    # print()
    # for k in data["categories"][0]:
    #     print(k)
    # print()
    # input()
    # for i in range(len(img_annIds)):
    #     print(i)
    #     print("***", len(img_annIds))
    #     print(coco.loadAnns(6))
    #     x, y, w, h = coco.loadAnns(1)[0]['bbox']  # 读取边框
    #     image = cv2.rectangle(image, (int(x), int(y)), (int(x + w), int(y + h)), (0, 255, 255), 2)
    #
    #     plt.rcParams['figure.figsize'] = (20.0, 20.0)
    #     # 此处的20.0是由于我的图片是2000*2000，目前还没去研究怎么利用plt自动分辨率。
    #     plt.imshow(image)
    #     plt.show()


if __name__ == "__main__":
    visualization_bbox2(train_json)





